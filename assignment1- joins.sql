--Joins ---
--Retrieving all tables data 
select * from Customers
Select * from Products
select * from Orders
Select * from OrderDetails
select * from Inventory


--Query 1:-  Write an SQL query to retrieve a list of all orders along with customer information
--(e.g., customer name) for each order.

select Orders.OrderID, Orders.OrderDate , Customers.FirstName , Customers.PhoneNumber , Customers.Address ,Orders.status 
from Customers 
JOIN Orders 
ON Customers.CustomerID = Orders.CustomerID



--2. Write an SQL query to find the total revenue generated by each electronic gadget product. 
--Include the product name and the total revenue.

SELECT Products.ProductName, Products.Category, SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
WHERE Products.Category = 'Electronic Gadgets'
GROUP BY Products.ProductName, Products.Category

--3. Write an SQL query to list all customers who have made at least one purchase. Include their 
--names and contact information.


select Customers.FirstName , Customers.PhoneNumber, Customers.Email , COUNT(Orders.OrderID) as OrderCount
From Customers 
JOIN Orders 
ON Customers.CustomerID = Orders.CustomerID
Group By FirstName , PhoneNumber , Email
Order By OrderCount DESC

--4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest 
--total quantity ordered. Include the product name and the total quantity ordered.
select * from Products
select * from OrderDetails

Select TOP 1 Products.ProductName , SUM(OrderDetails.Quantity) as tot_qty_ordered
From Products JOIN OrderDetails
ON Products.ProductID=OrderDetails.ProductID
WHERE Products.Category='Electronic Gadgets'
GROUP BY ProductName
ORDER BY tot_qty_ordered DESC

--5. Write an SQL query to retrieve a list of electronic gadgets along with their corresponding 
--category.

select Products.ProductName , Products.Description  from Products 
Where Products.Category ='Electronic Gadgets'

--6. Write an SQL query to calculate the average order value for each customer. Include the 
--customer's name and their average order value.
select * from Customers as  C
select * from Orders as O

SELECT  C.FirstName,avg(O.TotalAmount) AS AvgOrderValue
FROM 
CUSTOMERS C  JOIN ORDERS O ON C.CustomerID =O.CustomerID
GROUP BY C.FirstName


--7. Write an SQL query to find the order with the highest total revenue. Include the order ID, 
--customer information, and the total revenue.

select TOP 1 Orders.OrderID , Customers.FirstName , Customers.Email , Customers.PhoneNumber , 
SUM ( OrderDetails.Quantity * Products.Price) AS Tot_Revenue
FROM Orders JOIN Customers 
ON Orders.CustomerID = Customers.CustomerID
join OrderDetails on Orders.OrderID=OrderDetails.OrderID
join Products on OrderDetails.ProductID=Products.ProductID
GROUP BY Orders.OrderID,FirstName,Email,PhoneNumber
ORDER BY Tot_Revenue DESC



--8. Write an SQL query to list electronic gadgets and the number of times each product has been 
--ordered.
select * from Products
select * from Orders

select Products.ProductID,Products.ProductName , count(OrderDetails.OrderID) AS TotOrderCount
From Products LEFT JOIN OrderDetails
ON Products.ProductID = OrderDetails.ProductID
WHERE Products.Category = 'Electronic Gadgets'
GROUP BY Products.ProductID,ProductName

--9. Write an SQL query to find customers who have purchased a specific electronic gadget product. 
--Allow users to input the product name as a parameter.
select * from Customers 
select * from Products  
select * from OrderDetails 
select * from Orders 

Declare @elec_Gadget_Purchased varchar(50) = 'One Plus Nord mobile'

select Customers.FirstName , Products.ProductName , Products.Category from Customers join Orders ON Customers.CustomerID = Orders.CustomerID
join OrderDetails ON OrderDetails.OrderID = Orders.OrderID
join  Products ON Products.ProductID=OrderDetails.ProductID
where Products.ProductName=@elec_Gadget_Purchased
Group by FirstName,ProductName,Category


--10. Write an SQL query to calculate the total revenue generated by all orders placed within a 
--specific time period. Allow users to input the start and end dates as parameters.

Declare @StartDate Date = '2023-06-01'
Declare @EndDate Date = '2023-11-30'

Select SUM(OrderDetails.Quantity * Products.Price) as TotalRevenue
From OrderDetails join Products on OrderDetails.ProductID=Products.ProductID
join Orders on Orders.OrderID=OrderDetails.OrderID
WHERE OrderDate Between @StartDate and @EndDate

select * from Orders
Select * from OrderDetails
select * from Products